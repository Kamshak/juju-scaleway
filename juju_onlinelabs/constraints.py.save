from juju_onlinelabs.exceptions import ConstraintError

# Would be nice to use ubuntu-distro-info, but portability.
SERIES_MAP = {
        'Ubuntu Utopic (14.10)': 'utopic',
        'Ubuntu Trusty (14.04 LTS)': 'trusty'}

ARCHES = ['armhf']

# afaics, these are unavailable
#
#    {'name': 'Amsterdam 1 1', 'aliases': ['ams1']

SUFFIX_SIZES = {
    "m": 1,
    "g": 1024,
    "t": 1024 * 1024,
    "p": 1024 * 1024 * 1024}


def converted_size(s):
    q = s[-1].lower()
    size_factor = SUFFIX_SIZES.get(q)
    if size_factor:
        if s[:-1].isdigit():
            return int(s[:-1]) * size_factor
        return None
    elif s.isdigit():
        return int(s)
    return None


def parse_constraints(constraints):
    """
    """
    c = {}
    parts = filter(None, constraints.split(","))
    for p in parts:
        k, v = p.split('=', 1)
        c[k.strip()] = v.strip()

    unknown = set(c).difference(
        set(['region', 'transfer', 'cpu-cores', 'root-disk', 'mem', 'arch']))
    if unknown:
        raise ConstraintError("Unknown constraints %s" % (" ".join(unknown)))

    if 'mem' in c:
        q = converted_size(c['mem'])
        if q is None:
            raise ConstraintError("Invalid memory size %s" % c['mem'])
        c['mem'] = q

    if 'root-disk' in c:
        d = c.pop('root-disk')
        q = converted_size(d)
        if q is None:
            raise ConstraintError("Unknown root disk size %s" % d)
        c['disk'] = q

    if 'transfer' in c:
        d = c.pop('transfer')
        if not d.isdigit():
            raise ConstraintError("Unknown transfer size %s" % d)
        c['xfer'] = int(d)

    if 'cpu-cores' in c:
        d = c.pop('cpu-cores')
        if not d.isdigit():
            raise ConstraintError("Unknown cpu-cores size %s" % d)
        c['cpu'] = int(d)

    if 'arch' in c:
        d = c.pop('arch')
        if not d in ARCHES:
            raise ConstraintError("Unsupported arch %s" % d)

    if 'region' in c:
        for r in REGIONS:
            if c['region'] == r['name']:
                c['region'] = r['id']
            elif c['region'] in r['aliases']:
                c['region'] = r['id']
        if not isinstance(c['region'], int):
            raise ConstraintError("Unknown region %s" % c['region'])
    return c


#def solve_constraints(constraints):
    #"""Return machine size and region.
    #"""
    #constraints = parse_constraints(constraints)

    #raise ConstraintError("Could not match constraints %s" % (
        #", ".join(["%s=%s" % (k, v in constraints.items())])))


def get_images(client):
    images = {}
    for i in client.get_images():
        if not i.public:
            continue
        #if not i.name == "Ubuntu":
            #continue

        for s in SERIES_MAP:
            if ("%s" % s) == i.name:
                images[SERIES_MAP[s]] = i.id
                #images[s.replace('-', '.')] = i.id
    return images
